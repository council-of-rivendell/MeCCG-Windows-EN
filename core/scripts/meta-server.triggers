#
#    Gccg - Generic collectible card game.
#    Copyright (C) 2001-2013 Tommi Ronkainen
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program, in the file license.txt. If not, write
# to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
##############################################################################
#
#                              Chat room
#
##############################################################################

trigger "init" "" code
{
  game.data=game_data();
  GAME=game.data{"game"};
  GAMEDIR=game.data{"gamedir"};

  execute("common.include");

  factory.server_name="localhost";

  tables=(,);
  draft.tables=(,);
  players=(,);

  execute("meta-server.functions");
  execute(GAMEDIR+"-meta-server.include");

  Log("Loading old data... ");

  users=(,);

  if(load("users"))
  {
    attach("users","DBStringKeys");
    delsaved("users");
    delsaved("users.bak");
  }
  else
    attach("users","DBStringKeys");

  if(!load("prices"))
    prices=(,);
  if(!load("ban"))
    ban=(,);
  if(!load("tableban"))
    tableban=(,);
  if(!load("restrict"))
    restrict=(,);

  cache_parameters("users",(5,900,5,25));

  randomize();
}

trigger "init" "server" code
{
}

trigger "error" "network" code
{
  Log("NETWORK ERROR: "+net_client_name(event)+" message: "+error.message);
  stacktrace();
  errors=errors+1;
  set_error_trigger("","");
}

trigger "error" "command" code
{
  Log("ERROR: "+net_client_name(event)+" message: "+error.message);
  if(error.echo!=NULL)
    Send(error.echo,("Message","{red}ERROR: "+net_client_name(event)+" message: "+error.message));
  
  stacktrace();
  errors=errors+1;
  set_error_trigger("","");
}

trigger "init" "game" code
{
  push(try);
  randomize();
  Log("Initializing server at port "+port);
  net_create_server(port);
  try=5;
  while(try)
  {
    Log("Connecting to factory "+factory.server_name+" port "+factory.port+" ... ");
    factory.server=net_connect(factory.server_name,factory.port);
    if(factory.server==NULL)
    {
      Log("FAILED: factory not yet available, waiting...");
      sleep(5);
      try=try-1;
    }
    else
    {
      Log("connected");
      push(c);
      while(try)
      {
        c=net_get();
        if(c!=NULL)
        {
          set.data=toval(c[1]);
          Log("received set info for "+length(set.data)+" set(s)");
          try=0;
        }
      }
      c=pop();
    }
  }

  if(set.data==NULL)
    quit(1);

  try=pop();
}

trigger "main" "" code
{
  push(e);
  e=net_server_get();
  if(e!=NULL)
  {
    if(first(e)=="quit")
      quit(1);
    else
      ReceiveData(e);
  }
  e=pop();
}

trigger "exit" "" code
{
  SaveAll();
}
