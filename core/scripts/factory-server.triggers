#
#    Gccg - Generic collectible card game.
#    Copyright (C) 2001-2013 Tommi Ronkainen
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program, in the file license.txt. If not, write
# to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
##############################################################################
#
# Booster/starter generator
#
##############################################################################

trigger "init" "" code
{
  game.data=game_data();
  GAME=game.data{"game"};
  GAMEDIR=game.data{"gamedir"};

  set.data=(,);
  forall("set.data{#}=set_data(#)",sets());
  randomize();
  execute("factory-server.functions");
  rarities=rarities();
  Log("Rarities found: "+join(rarities," "));
  if(!execute(GAMEDIR+"-factory-server.include"))
  {
    println("");
    println(GAMEDIR+"-factory-server.include not defined for this game");
    println("");
    quit(1);
  }
  
  Initialize();
}

trigger "init" "server" code
{
}

trigger "init" "game" code
{
  Log("Initializing factory server at port "+port);
  net_create_server(port);
}

trigger "main" "" code
{
  z=net_server_get();

  if(z!=NULL)
  {
    if(typeof(z[0])=="integer")
    {
      c=toval(z[1]);
      Log("Received: "+tostr(c));
      ret=NULL;
      if(length(c)==3)
      {
        if(count(c[1],sets()))
        {
          Log("Sending "+c[0]+" "+c[1]+" "+c[2]+"(s)");
          ret=Produce(c[1],c[2],c[0]);
          if(count(NULL,ret))
            ret=NULL;
        }
        else
         Log("Invalid set "+tostr(c[1]));
      }

      if(ret!=NULL)
        net_server_send(z[0],ret);
      else
        net_server_send(z[0],(,));
    }
    elseif(z[0]=="open")
    {
      Log(net_client_name(0)+" connected");
      Log("Sending set info of "+length(set.data)+" sets");
      net_server_send(z[1],set.data);
    }
    elseif(z[0]=="quit")
      quit(1);
  }
}
