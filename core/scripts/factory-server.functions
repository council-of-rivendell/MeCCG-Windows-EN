#
#    Gccg - Generic collectible card game.
#    Copyright (C) 2001,2002,2003,2004 Tommi Ronkainen
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program, in the file license.txt. If not, write
# to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
##############################################################################
#
# Booster/starter generator
#
##############################################################################
#
#  Constants:
#
# GAME - title of the game
# GAMEDIR - name of the directory of the game
#
# Variables:
#
# cards{set}{rarity} - weighted list of card numbers of the given set and rarity
# game.data - structure holding generic game information (see. game_data())
# rarities - list of rarities
# set.data{set} - set information for each card set (see. set_data())
#
# Functions:
#
# CardsOfSetWithRarity(card numbers,rarity) - Return weighted set of cards with the given rarity
# FixedSet(set,list of card names) - return fixed set of card numbers.
# Initialize() - Initialize all tables.
# InitTables(set abbrev) - initialize card tables for set
# Log(message) - Print a message with date and time.
# Produce(type,set,quantity) - return n "boosters" or "starters" of set
# RandomCardSet(set abbrev,distribution) - return random sample of cards with given distribution
#

#
# Log(message) - Print a message with date and time.
#
def Log
{
  println(date()+" "+time()+" "+ARG);
}

#
# CardsOfSetWithRarity(card numbers,rarity) - Return weighted set of cards with given rarity.
#
def CardsOfSetWithRarity
{
  return(having_rarity(ARG[1],ARG[0]));
}

#
# RandomCardSet(set abbrev,distribution) - Return random sample of cards with given distribution.
#
def RandomCardSet
{
  push(d);
  push(r);
  push(t);
  push(pack);
  pack=(,);
  for(d)(ARG[1])
  {
    dist=(,);
    for(r)(split(d[1],"+"))
    {
      reps=1;
      if(find("*",r))
      {
        t=split(r,"*");
        if(reps=toint(t[0]))
          r=t[1];
        else if(reps=toint(t[1]))
          r=t[0];
        else
        {
          Log("Invalid distribution token: "+r);
          r="";
        }
      }
      if(find("/",r))
      {
        t=split(r,"/");
        dist=dist+(cards{t[0]}{t[1]}*reps);
      }
      else
        dist=dist+(cards{ARG[0]}{r}*reps);
    }
    pack=pack+left(shuffle(flatten(dist)),d[0]);
  }
  return(pack);
  pack=pop();
  t=pop();
  r=pop();
  d=pop();
}


#
# CompleteCardSet(set abbrev,distribution) - Return weighted full copy of distribution.
#
def CompleteCardSet
{
  return(cards{ARG[0]}{ARG[1]});
}

#
# InitTables(set abbrev) - Initialize card distribution tables for a set.
#
def InitTables
{
  push(s);
  if(cards==NULL)
    cards=(,);
  s=set_data(ARG);
  s=seq(s[1],s[2]);
  cards{ARG}=(,);
  for(r)(rarities)
    cards{ARG}{r}=CardsOfSetWithRarity(s,r);
  s=pop();
}

#
# Produce(set,type,quantity) - Return n "boosters" or "starters" of set.
#
def Produce
{
  if(isfunction("Produce"+ucfirst(ARG[1])))
     return(repeat(ARG[2],"call('Produce'+ucfirst(ARG[1]),ARG[0])"));
  else if(isfunction("Produce"+ARG[0]+"_"+ucfirst(ARG[1])))
     return(repeat(ARG[2],"call('Produce'+ARG[0]+'_'+ucfirst(ARG[1]),NULL)"));
  else if(has_entry(ARG[0],distribution))
  {
    if(has_entry(ARG[1],distribution{ARG[0]}))
      return(repeat(ARG[2],"RandomCardSet(ARG[0],distribution{ARG[0]}{ARG[1]},ARG[2])"));
    else
      Log("Invalid product asked: "+ARG[0]+" "+ARG[1]);
  }
  else
    Log("Invalid product asked: "+ARG[0]+" "+ARG[1]);
}

#
# FixedSet(set,list of card names) - return fixed set of card numbers.
#
def FixedSet
{
  push(c);
  c=images(ARG[1]);
  if(count((,),c))
  {
    Log("ERROR: FixedSet: Invalid card names in fixed set: "+tostr(ARG[1]));
    push(i);
    for(i)(length(ARG[1]))
    {
       if(c[i]==(,))
         Log("FAILED:     "+ARG[1][i]);
    }
    i=pop();
    c=(,);
  }
  else
  {
    c=select("set_of(#)==ARG[0]",flatten(c));
    if(length(ARG[1]) != length(c))
    {
      Log("ERROR: Fixed set size does not match for: "+join(sort(ARG[1]),", "));
      Log("ERROR: Result was                       : "+join(sort(name(c)),", "));
    }
  }

  return(c);
  c=pop();
}

#
# Initialize() - Initialize all card distribution tables.
#
def Initialize
{
  Log("Initializing tables... ");

  InitDistributions();
  forall("InitTables(#)",sets());

  for(s)(keys("cards"))
  {
    Log("Set "+s+": "+join(select("#!=''",forall("if(length(cards{s}{#})) length(cards{s}{#})+'x'+#; else ''",keys(cards{s})))," "));
  }
}
